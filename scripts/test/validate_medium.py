import micom
import os
import pandas as pd
from pathlib import Path 
import argparse
from micom.workflows import build
from micom import Community
from micom.qiime_formats import load_qiime_medium
from micom.workflows import grow, save_results, complete_community_medium 

# Simulate growth rates for samples at each timepoint
# need to do this for each subject id

# TO DO:
# 1. Load the data generated by silva_taxonomy_mapping.py

def load_subject_data(subject_id, qza_dir, collapse_on='genus'):
    """
    Load subject data and convert it to a MICOM-compatible format.
    Parameters:
    subject_id (str): The identifier for the subject.
    qza_dir (str): The directory where the QIIME2 artifact files are located.
    collapse_on (str, optional): The taxonomic level to collapse on. Default is 'genus'.
    Returns:
    micom.Community: A MICOM community object created from the subject's data.
    """
    
    feature_table_fp = os.path.join(qza_dir, f"{subject_id}_feature_table.qza")
    taxonomy_fp = os.path.join(qza_dir, f"{subject_id}_taxonomy.qza")
    subject_micom = micom.taxonomy.qiime_to_micom(feature_table_fp,
                                                  taxonomy_fp, 
                                                  collapse_on=collapse_on)
    
    return subject_micom

import pandas as pd

def filter_first_n_sample_ids(subject_micom, n=3):
    # Get the first three unique sample_ids
    first_n_ids = subject_micom["sample_id"].unique()[:n]
    
    # Filter the dataframe
    filtered_subject_micom = subject_micom[subject_micom["sample_id"].isin(first_n_ids)].reset_index(drop=True)
    
    return filtered_subject_micom

#todo: reorder variables in main to match code and parser order
def main(subject_id, qza_dir, 
         model_name, model_dir,
         pickled_gsmm_out, solver, 
         threads, diet_fp, 
         tradeoff, growth_out_fp):
    
    
    model_fp = os.path.join(model_dir, model_name)
    model_extract_fp = os.path.join(model_dir, Path(model_name).stem)

    subject_micom = load_subject_data(subject_id, qza_dir)
    filtered_subject_micom = filter_first_n_sample_ids(subject_micom)
    #print(filtered_subject_micom)
    #agora_db = micom.qiime_formats.load_qiime_model_db(model_fp, model_extract_fp)

    diet = load_qiime_medium(diet_fp)
    #print(diet)

    manifest = build(filtered_subject_micom,
                    out_folder=pickled_gsmm_out,
                    model_db=model_fp,
                    cutoff=0.0001,
                    solver=solver,
                    threads=threads)
    #print(manifest)
    comp_diet = complete_community_medium(manifest, model_folder=pickled_gsmm_out, medium=diet,
                    community_growth=0.1, min_growth=0.001, minimize_components=True,
                    max_import=1, threads=threads)
    
    #added_components = print(comp_diet[~comp_diet['reaction'].isin(diet['reaction'])]['reaction'])
    print(len(diet))
    print(len(comp_diet))
    #print(added_components)
    diet.to_csv('diet_components.csv', index=False)
    comp_diet.to_csv('comp_diet_components.csv', index=False)

    # print(comp_diet)
    # growth = grow(manifest, pickled_gsmm_out, 
    #               medium=comp_diet, tradeoff=tradeoff, 
    #               threads=threads, presolve=True)
    # save_results(growth, growth_out_fp)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Build and grow MICOM growth models")
    parser.add_argument("--subject_id", 
                        required=True, 
                        help="subject ID to process")
    parser.add_argument("--qza_dir",  
                        default="../../data/qiime_outputs/", 
                        help="Path to .qza feature table")
    parser.add_argument("--model_dir", 
                        default="../../data/models/", 
                        help="Path to model directory, also where .qza will be unzipped")
    parser.add_argument("--model_name", 
                        required=True, 
                        help="Name of .qza file for GSMM (e.g. agora103_genus.qza)")
    parser.add_argument("--pickled_gsmm_out", 
                        required=True, 
                        help="Output directory for GSMM .pickle files generated during build()")
    parser.add_argument("--solver", 
                        required=True,
                        default="osqp", 
                        help="Specify solver (e.g. osqp, gurobi, cplex)")
    parser.add_argument("--threads", 
                        type=int,
                        required=True, 
                        default=1,
                        help="Specify number of threads for paralellization ")
    parser.add_argument("--diet_fp", 
                        required=True, 
                        help="Path to qiime defined medium .qza (e.g. western diet gut agora)")
    parser.add_argument("--tradeoff", 
                        required=True, 
                        type=float,
                        help="Cooperative tradeoff (value between 0-1)")
    parser.add_argument("--growth_out_fp", 
                        required=True, 
                        help="Path for output growth.zip from micom grow()")
    

    args = parser.parse_args()

    main(args.subject_id, args.qza_dir, 
        args.model_name, args.model_dir,
        args.pickled_gsmm_out, args.solver, 
        args.threads, args.diet_fp, 
        args.tradeoff, args.growth_out_fp)

